# Contributing to Heart Disease Prediction

Thank you for your interest in contributing to the Heart Disease Prediction project! This document provides guidelines for contributing to the project.

## 🤝 How to Contribute

### Reporting Issues

1. **Search existing issues** first to avoid duplicates
2. **Use the issue template** if available
3. **Provide detailed information** including:
   - Python version
   - Operating system
   - Steps to reproduce the issue
   - Expected vs actual behavior
   - Error messages or logs

### Suggesting Features

1. **Check existing feature requests** to avoid duplicates
2. **Provide a clear description** of the feature
3. **Explain the use case** and why it would be valuable
4. **Consider the scope** - keep it focused and relevant

### Code Contributions

#### Development Setup

1. Fork the repository
2. Clone your fork:
   ```bash
   git clone https://github.com/yourusername/heart-disease-prediction.git
   cd heart-disease-prediction
   ```

3. Create a virtual environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

4. Install dependencies:
   ```bash
   pip install -r requirements.txt
   pip install -e .  # Install in development mode
   ```

#### Making Changes

1. **Create a new branch** for your feature/fix:
   ```bash
   git checkout -b feature/your-feature-name
   ```

2. **Write clean, readable code** following these guidelines:
   - Follow PEP 8 style guidelines
   - Add docstrings to functions and classes
   - Use meaningful variable and function names
   - Keep functions focused and small

3. **Add tests** for new functionality:
   - Place tests in the `tests/` directory
   - Use pytest for testing
   - Ensure good test coverage

4. **Update documentation** if needed:
   - Update README.md for new features
   - Add docstrings to new functions
   - Update examples if applicable

#### Code Style

- **Formatting**: Use `black` for code formatting
  ```bash
  pip install black
  black src/ tests/
  ```

- **Linting**: Use `flake8` for linting
  ```bash
  pip install flake8
  flake8 src/ tests/
  ```

- **Type hints**: Add type hints where possible
  ```python
  def predict(self, data: Dict[str, Any]) -> float:
      pass
  ```

#### Testing

Run tests before submitting:
```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=src tests/

# Run specific test file
pytest tests/test_predictor.py
```

#### Committing Changes

1. **Write clear commit messages**:
   ```
   Add feature: Implement cross-validation scoring
   
   - Added StratifiedKFold cross-validation
   - Updated model evaluation metrics
   - Added visualization for CV scores
   ```

2. **Keep commits focused** - one logical change per commit

3. **Test your changes** before committing

#### Submitting Pull Requests

1. **Push your branch** to your fork:
   ```bash
   git push origin feature/your-feature-name
   ```

2. **Create a pull request** with:
   - Clear title describing the change
   - Detailed description of what was changed and why
   - Reference to related issues (if any)
   - Screenshots for UI changes (if applicable)

3. **Respond to feedback** promptly and make requested changes

## 📋 Pull Request Checklist

Before submitting, ensure:

- [ ] Code follows project style guidelines
- [ ] All tests pass locally
- [ ] New tests added for new functionality
- [ ] Documentation updated as needed
- [ ] Commit messages are clear and descriptive
- [ ] No merge conflicts with main branch
- [ ] Pull request description is complete

## 🐛 Bug Fix Guidelines

- **Reproduce the bug** before fixing
- **Add a test** that would have caught the bug
- **Fix the minimal amount** of code necessary
- **Document the fix** in the commit message

## ✨ Feature Development Guidelines

- **Discuss major changes** in an issue first
- **Keep features focused** and avoid scope creep
- **Maintain backward compatibility** when possible
- **Add comprehensive tests** for new features
- **Update documentation** and examples

## 🔄 Review Process

1. **Automated checks** must pass (CI/CD)
2. **Code review** by maintainers
3. **Testing** on different environments
4. **Documentation review** if applicable
5. **Final approval** and merge

## 📝 Documentation

- Use **clear, concise language**
- Include **code examples** where helpful
- Keep **README.md** up to date
- Add **docstrings** to all public functions
- Update **API documentation** for changes

## 🏷️ Versioning

We follow [Semantic Versioning](https://semver.org/):
- **MAJOR**: Breaking changes
- **MINOR**: New features (backward compatible)
- **PATCH**: Bug fixes (backward compatible)

## 🎯 Areas for Contribution

We especially welcome contributions in these areas:

- **Model improvements**: New algorithms, better hyperparameter tuning
- **Data preprocessing**: Better feature engineering, data validation
- **Visualization**: Enhanced plots, interactive dashboards
- **Performance**: Code optimization, memory efficiency
- **Documentation**: Better examples, tutorials
- **Testing**: Improved test coverage, edge cases
- **Deployment**: Docker containerization, cloud deployment guides

## 🤔 Questions?

If you have questions about contributing:

1. Check existing [discussions](https://github.com/yourusername/heart-disease-prediction/discussions)
2. Create a new discussion or issue
3. Contact the maintainers

## 🙏 Recognition

Contributors will be:
- Listed in the README.md contributors section
- Mentioned in release notes for significant contributions
- Credited in academic publications (if applicable)

Thank you for helping make this project better! 🎉
